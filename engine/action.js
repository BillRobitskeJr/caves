/**
 * Entity action abstraction
 * @copyright   Bill Robitske, Jr. 2018
 * @author      Bill Robitske, Jr. <bill.robitske.jr@gmail.com>
 * @license     MIT
 */

// Symbols for semi-private members
const _actor = Symbol('actor');
const _verbs = Symbol('verbs');
const _start = Symbol('start');
const _complete = Symbol('complete');

/**
 * Entity action class
 */
export default class Action {

  /**
   * @callback  Action.PhaseHandler
   * @param     {Entity}              actor     - Entity performing this action
   * @param     {EngineCore.Command}  command   - Command being performed
   * @param     {EngineCore.Output}   output    - Game output
   * @param     {Object}              entities  - Current/effective entities
   * @returns   {Action.StateUpdates}           - Requested updates generated by this action phase
   */

  /**
   * @typedef   Action.Entities
   * @property  {Entity}      game        - Current/effective game entity
   * @property  {Entity}      player      - Current/effective player entity
   * @property  {Collection}  locations   - Current/effective location entities
   * @property  {Collection}  objects     - Current/effective object entities
   */

  /**
   * @typedef   Action.StateUpdates
   * @property  {boolean}                             abort     - The current action should be stopped after this update request
   * @property  {Object.<string, *>}                  game      - Requested updates to the game entity state
   * @property  {Object.<string, *>}                  player    - Requested updates to the player entity state
   * @property  {Object.<number, Object.<string, *>>} locations - Requested updates to location entity states
   * @property  {Object.<number, Object.<string, *>>} objects   - Requested updates to object entity states
   */

  /**
   * Create a new entity action
   * @param     {Entity}              actor             - Entity able to perform this action
   * @param     {Object}              config            - Configuration for this action
   * @param     {string[]}            config.verbs      - Verbs associated with this action
   * @param     {Action.PhaseHandler} [config.start]    - Function to call during this action's start phase
   * @param     {Action.PhaseHandler} [config.complete] - Function to call during this action's complete phase
   */
  constructor(actor, config = {}) {
    this[_actor] = actor || new Entity();
    this[_verbs] = Array.from(config.verbs || []);
    this[_start] = typeof config.start === 'function' ? config.start : (() => {});
    this[_complete] = typeof config.complete === 'function' ? config.complete : (() => {});
  }

  /**
   * @property  {string[]}  verbs           - Verbs associated with this action
   * @readonly
   */
  get verbs() { return Array.from(this[_verbs]); }

  /**
   * @property  {RegExp}    verbExpression  - Regular expression for matching this action's verbs
   * @readonly
   */
  get verbExpression() { return new RegExp(`(${this[_verbs].join('|')})`, 'i'); }

  /**
   * Start performing this action
   * @param     {EngineCore.Command}  command   - Command being performed
   * @param     {EngineCore.Output}   output    - Game output
   * @param     {Action.Entities}     entities  - Current/effective entities
   * @returns   {Action.stateUpdates}           - Requested updates to entity states
   */
  start(command, output, entities) {
    return this[_start](this[_actor], command, output, entities) || {};
  }

  /**
   * Complete this action
   * @param     {EngineCore.Command}  command   - Command being performed
   * @param     {EngineCore.Output}   output    - Game output
   * @param     {Action.Entities}     entities  - Current/effective entities
   * @returns   {Action.stateUpdates}           - Requested updates to entity states
   */
  complete(command, output, entities) {
    return this[_complete](this[_actor], command, output, entities) || {};
  }

  /**
   * Create a copy of this action for another actor
   * @param     {Entity}  actor   - Entity able to perform the new copy of this action
   * @returns   {Action}          - New copy of this action
   */
  cloneForActor(actor) {
    return new Action(actor, {
      verbs: Array.from(this[_verbs]),
      start: this[_start],
      complete: this[_complete]
    });
  }
}
